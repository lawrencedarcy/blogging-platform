{"ast":null,"code":"import axios from 'axios';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie'; // set up cookies\n\nconst cookies = new Cookies();\nconst serverUrl = 'http://localhost:3001';\nexport async function handleAuthSSR(ctx) {\n  let token = null; // if context has request info aka Server Side\n\n  if (ctx.req) {\n    // ugly way to get cookie value from a string of values\n    // good enough for demostration\n    token = ctx.req.headers.cookie.replace(/(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\n  } else {\n    // we dont have request info aka Client Side\n    token = cookies.get('token');\n  }\n\n  try {\n    const response = await axios.get(serverUrl + \"/api/token/ping\", {\n      headers: {\n        'Authorization': token\n      }\n    }); // dont really care about response, as long as it not an error\n\n    console.log(\"token ping:\", response.data.msg);\n  } catch (err) {\n    // in case of error\n    console.log(err.response.data.msg);\n    console.log(\"redirecting back to main page\"); // redirect to login\n\n    if (ctx.res) {\n      ctx.res.writeHead(302, {\n        Location: '/'\n      });\n      ctx.res.end();\n    } else {\n      Router.push('/');\n    }\n  }\n}","map":{"version":3,"sources":["/Users/lawrence_wakefield/Documents/Development/codeworks/final-project/blogging-platform/next/utils/auth.js"],"names":["axios","Router","Cookies","cookies","serverUrl","handleAuthSSR","ctx","token","req","headers","cookie","replace","get","response","console","log","data","msg","err","res","writeHead","Location","end","push"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,OAAT,QAAwB,cAAxB,C,CACA;;AACA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AACA,MAAME,SAAS,GAAG,uBAAlB;AAEA,OAAO,eAAeC,aAAf,CAA6BC,GAA7B,EAAkC;AACvC,MAAIC,KAAK,GAAG,IAAZ,CADuC,CAGvC;;AACA,MAAID,GAAG,CAACE,GAAR,EAAa;AACX;AACA;AACAD,IAAAA,KAAK,GAAGD,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAA+B,8CAA/B,EAA+E,IAA/E,CAAR;AACD,GAJD,MAKK;AACH;AACAJ,IAAAA,KAAK,GAAGJ,OAAO,CAACS,GAAR,CAAY,OAAZ,CAAR;AACD;;AAED,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACY,GAAN,CAAUR,SAAS,GAAG,iBAAtB,EAAyC;AAAEK,MAAAA,OAAO,EAAE;AAAE,yBAAiBF;AAAnB;AAAX,KAAzC,CAAvB,CADE,CAEF;;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,QAAQ,CAACG,IAAT,CAAcC,GAAzC;AACD,GAJD,CAIE,OAAOC,GAAP,EAAY;AACZ;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACL,QAAJ,CAAaG,IAAb,CAAkBC,GAA9B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAHY,CAIZ;;AACA,QAAIT,GAAG,CAACa,GAAR,EAAa;AACXb,MAAAA,GAAG,CAACa,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AACrBC,QAAAA,QAAQ,EAAE;AADW,OAAvB;AAGAf,MAAAA,GAAG,CAACa,GAAJ,CAAQG,GAAR;AACD,KALD,MAKO;AACLrB,MAAAA,MAAM,CAACsB,IAAP,CAAY,GAAZ;AACD;AACF;AACF","sourcesContent":["import axios from 'axios';\nimport Router from 'next/router';\nimport { Cookies } from 'react-cookie';\n// set up cookies\nconst cookies = new Cookies();\nconst serverUrl = 'http://localhost:3001';\n\nexport async function handleAuthSSR(ctx) {\n  let token = null;\n\n  // if context has request info aka Server Side\n  if (ctx.req) {\n    // ugly way to get cookie value from a string of values\n    // good enough for demostration\n    token = ctx.req.headers.cookie.replace(/(?:(?:^|.*;\\s*)token\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\n  }\n  else {\n    // we dont have request info aka Client Side\n    token = cookies.get('token')\n  }\n\n  try {\n    const response = await axios.get(serverUrl + \"/api/token/ping\", { headers: { 'Authorization': token } });\n    // dont really care about response, as long as it not an error\n    console.log(\"token ping:\", response.data.msg)\n  } catch (err) {\n    // in case of error\n    console.log(err.response.data.msg);\n    console.log(\"redirecting back to main page\");\n    // redirect to login\n    if (ctx.res) {\n      ctx.res.writeHead(302, {\n        Location: '/'\n      })\n      ctx.res.end()\n    } else {\n      Router.push('/')\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}