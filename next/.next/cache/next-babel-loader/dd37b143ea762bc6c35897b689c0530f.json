{"ast":null,"code":"var _jsxFileName = \"/Users/lawrence_wakefield/Documents/Development/codeworks/final-project/blogging-platform/next/components/Feed/Feed.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Card from '../Card/Card';\nimport styles from './Feed.module.css';\nimport FeedHeader from './FeedHeader';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nfunction Feed(_ref) {\n  var _this = this;\n\n  var posts = _ref.posts,\n      feedState = _ref.feedState,\n      addToList = _ref.addToList,\n      deleteFromList = _ref.deleteFromList,\n      checkReadingList = _ref.checkReadingList;\n\n  var _useState = useState(8),\n      postsToShow = _useState[0],\n      setPostsToShow = _useState[1];\n\n  var _useState2 = useState('feed'),\n      method = _useState2[0],\n      setMethod = _useState2[1];\n\n  var _useState3 = useState(true),\n      hasMore = _useState3[0],\n      setHasMore = _useState3[1];\n\n  var loadFunc = function loadFunc() {\n    setPostsToShow(function (postsToShow) {\n      return postsToShow + 1;\n    });\n    postsToShow >= posts.length && setHasMore(false);\n    console.log('posts to show', postsToShow);\n  };\n\n  var sortBy = function sortBy(posts, method) {\n    var sortedList = [];\n\n    if (method === 'popular') {\n      sortedList = posts.sort(function (a, b) {\n        a = a.votes;\n        b = b.votes;\n        return a > b ? -1 : a < b ? 1 : 0;\n      });\n    }\n\n    if (method === 'latest') {\n      sortedList = posts.sort(function (a, b) {\n        a = a.timestamp;\n        b = b.timestamp;\n        return a > b ? -1 : a < b ? 1 : 0;\n      });\n    }\n\n    if (method === 'feed') {\n      sortedList = posts.sort(function (a, b) {\n        a = a.timestamp / 100000000 + a.votes / 10;\n        b = b.timestamp / 100000000 + b.votes / 10;\n        return a > b ? -1 : a < b ? 1 : 0;\n      });\n    }\n\n    return sortedList;\n  };\n\n  var methodHandler = function methodHandler(m) {\n    setMethod(m);\n  };\n\n  return __jsx(\"div\", {\n    className: styles.feed_body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, feedState === 'tags' && __jsx(FeedHeader, {\n    filter: 'tags',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 32\n    }\n  }), feedState === 'search' && __jsx(FeedHeader, {\n    filter: 'search',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 34\n    }\n  }), feedState === 'list' && __jsx(FeedHeader, {\n    filter: 'list',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 32\n    }\n  }), feedState === 'normal' && __jsx(FeedHeader, {\n    filter: 'normal',\n    methodHandler: methodHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), __jsx(InfiniteScroll, {\n    pageStart: 0,\n    loadMore: loadFunc,\n    hasMore: true,\n    loader: __jsx(\"div\", {\n      className: \"loader\",\n      key: 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, \"Loading ...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 1\n    }\n  }, sortBy(posts, method).slice(0, postsToShow).map(function (post, i) {\n    return __jsx(\"div\", {\n      className: styles.feed_card,\n      key: post._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, __jsx(Card, {\n      id: i,\n      post: post,\n      addToList: addToList,\n      feedState: feedState,\n      deleteFromList: deleteFromList,\n      checkReadingList: checkReadingList,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }));\n  })));\n}\n\nexport default Feed;","map":{"version":3,"sources":["/Users/lawrence_wakefield/Documents/Development/codeworks/final-project/blogging-platform/next/components/Feed/Feed.js"],"names":["React","useState","useEffect","Card","styles","FeedHeader","InfiniteScroll","Feed","posts","feedState","addToList","deleteFromList","checkReadingList","postsToShow","setPostsToShow","method","setMethod","hasMore","setHasMore","loadFunc","length","console","log","sortBy","sortedList","sort","a","b","votes","timestamp","methodHandler","m","feed_body","slice","map","post","i","feed_card","_id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;;AAEA,SAASC,IAAT,OAMG;AAAA;;AAAA,MALDC,KAKC,QALDA,KAKC;AAAA,MAJDC,SAIC,QAJDA,SAIC;AAAA,MAHDC,SAGC,QAHDA,SAGC;AAAA,MAFDC,cAEC,QAFDA,cAEC;AAAA,MADDC,gBACC,QADDA,gBACC;;AAAA,kBAEoCX,QAAQ,CAAC,CAAD,CAF5C;AAAA,MAEKY,WAFL;AAAA,MAEkBC,cAFlB;;AAAA,mBAG0Bb,QAAQ,CAAC,MAAD,CAHlC;AAAA,MAGKc,MAHL;AAAA,MAGaC,SAHb;;AAAA,mBAI4Bf,QAAQ,CAAC,IAAD,CAJpC;AAAA,MAIKgB,OAJL;AAAA,MAIcC,UAJd;;AAMF,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACtBL,IAAAA,cAAc,CAAE,UAAAD,WAAW;AAAA,aAAIA,WAAW,GAAC,CAAhB;AAAA,KAAb,CAAd;AACAA,IAAAA,WAAW,IAAIL,KAAK,CAACY,MAArB,IAA+BF,UAAU,CAAC,KAAD,CAAzC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BT,WAA7B;AACA,GAJD;;AAMC,MAAMU,MAAM,GAAG,SAATA,MAAS,CAACf,KAAD,EAAQO,MAAR,EAAmB;AAChC,QAAIS,UAAU,GAAG,EAAjB;;AACA,QAAIT,MAAM,KAAK,SAAf,EAA0B;AACxBS,MAAAA,UAAU,GAAGhB,KAAK,CAACiB,IAAN,CAAW,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACrCD,QAAAA,CAAC,GAAGA,CAAC,CAACE,KAAN;AACAD,QAAAA,CAAC,GAAGA,CAAC,CAACC,KAAN;AACA,eAAOF,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAaD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAhC;AACD,OAJY,CAAb;AAKD;;AAED,QAAIZ,MAAM,KAAK,QAAf,EAAyB;AACrBS,MAAAA,UAAU,GAAGhB,KAAK,CAACiB,IAAN,CAAW,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACvCD,QAAAA,CAAC,GAAGA,CAAC,CAACG,SAAN;AACAF,QAAAA,CAAC,GAAGA,CAAC,CAACE,SAAN;AAEA,eAAOH,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAaD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAhC;AACD,OALc,CAAb;AAMH;;AAED,QAAIZ,MAAM,KAAK,MAAf,EAAuB;AACrBS,MAAAA,UAAU,GAAGhB,KAAK,CAACiB,IAAN,CAAW,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACvCD,QAAAA,CAAC,GAAGA,CAAC,CAACG,SAAF,GAAY,SAAZ,GAA0BH,CAAC,CAACE,KAAF,GAAQ,EAAtC;AACAD,QAAAA,CAAC,GAAGA,CAAC,CAACE,SAAF,GAAY,SAAZ,GAAyBF,CAAC,CAACC,KAAF,GAAQ,EAArC;AACA,eAAOF,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAaD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAhC;AACD,OAJc,CAAb;AAKH;;AACC,WAAOH,UAAP;AACD,GA3BD;;AA6BA,MAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAACC,CAAD,EAAO;AAACf,IAAAA,SAAS,CAACe,CAAD,CAAT;AAAa,GAA3C;;AAGA,SACE;AAAK,IAAA,SAAS,EAAE3B,MAAM,CAAC4B,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGvB,SAAS,KAAK,MAAd,IAAwB,MAAC,UAAD;AAAY,IAAA,MAAM,EAAE,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD3B,EAEGA,SAAS,KAAK,QAAd,IAA0B,MAAC,UAAD;AAAY,IAAA,MAAM,EAAE,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAF7B,EAGGA,SAAS,KAAK,MAAd,IAAwB,MAAC,UAAD;AAAY,IAAA,MAAM,EAAE,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAH3B,EAIGA,SAAS,KAAK,QAAd,IACC,MAAC,UAAD;AAAY,IAAA,MAAM,EAAE,QAApB;AAA8B,IAAA,aAAa,EAAEqB,aAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAQJ,MAAC,cAAD;AACI,IAAA,SAAS,EAAE,CADf;AAEI,IAAA,QAAQ,EAAEX,QAFd;AAGI,IAAA,OAAO,EAAE,IAHb;AAII,IAAA,MAAM,EAAE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,GAAG,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOKI,MAAM,CAACf,KAAD,EAAQO,MAAR,CAAN,CAAsBkB,KAAtB,CAA4B,CAA5B,EAA+BpB,WAA/B,EAA4CqB,GAA5C,CAAgD,UAACC,IAAD,EAAOC,CAAP;AAAA,WAC7C;AAAK,MAAA,SAAS,EAAEhC,MAAM,CAACiC,SAAvB;AAAkC,MAAA,GAAG,EAAEF,IAAI,CAACG,GAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AACE,MAAA,EAAE,EAAEF,CADN;AAEE,MAAA,IAAI,EAAED,IAFR;AAGE,MAAA,SAAS,EAAEzB,SAHb;AAIE,MAAA,SAAS,EAAED,SAJb;AAKE,MAAA,cAAc,EAAEE,cALlB;AAME,MAAA,gBAAgB,EAAEC,gBANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAD6C;AAAA,GAAhD,CAPL,CARI,CADF;AAmCD;;AAED,eAAeL,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from '../Card/Card';\nimport styles from './Feed.module.css';\nimport FeedHeader from './FeedHeader';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nfunction Feed({\n  posts,\n  feedState,\n  addToList,\n  deleteFromList,\n  checkReadingList\n}) {\n\n const [postsToShow, setPostsToShow] = useState(8)\n const [method, setMethod] = useState('feed');\n const [hasMore, setHasMore] = useState(true);\n\n const loadFunc = () => {\n  setPostsToShow((postsToShow => postsToShow+1));\n  postsToShow >= posts.length && setHasMore(false);\n  console.log('posts to show', postsToShow);\n }\n\n  const sortBy = (posts, method) => {\n    let sortedList = [];\n    if (method === 'popular') {\n      sortedList = posts.sort(function(a, b) {\n        a = a.votes;\n        b = b.votes;\n        return a > b ? -1 : a < b ? 1 : 0;\n      });\n    }\n\n    if (method === 'latest') {\n        sortedList = posts.sort(function(a, b) {\n        a = a.timestamp;\n        b = b.timestamp;\n        \n        return a > b ? -1 : a < b ? 1 : 0;\n      });\n    }\n\n    if (method === 'feed') {\n      sortedList = posts.sort(function(a, b) {\n      a = a.timestamp/100000000  + (a.votes/10);\n      b = b.timestamp/100000000 + (b.votes/10) ;\n      return a > b ? -1 : a < b ? 1 : 0;\n    });\n  }\n    return sortedList;\n  };\n\n  const methodHandler = (m) => {setMethod(m)} \n\n\n  return (\n    <div className={styles.feed_body} >\n      {feedState === 'tags' && <FeedHeader filter={'tags'} />}\n      {feedState === 'search' && <FeedHeader filter={'search'} />}\n      {feedState === 'list' && <FeedHeader filter={'list'} />}\n      {feedState === 'normal' && (\n        <FeedHeader filter={'normal'} methodHandler={methodHandler} />\n      )}\n\n<InfiniteScroll\n    pageStart={0}\n    loadMore={loadFunc}\n    hasMore={true}\n    loader={<div className=\"loader\" key={0}>Loading ...</div>}\n>\n\n   { sortBy(posts, method).slice(0, postsToShow).map((post, i) => (\n        <div className={styles.feed_card} key={post._id} >\n          <Card\n            id={i}\n            post={post}\n            addToList={addToList}\n            feedState={feedState}\n            deleteFromList={deleteFromList}\n            checkReadingList={checkReadingList}\n          />\n        </div>\n      ))}\n\n\n</InfiniteScroll>\n\n    \n    </div>\n  );\n}\n\nexport default Feed;\n"]},"metadata":{},"sourceType":"module"}