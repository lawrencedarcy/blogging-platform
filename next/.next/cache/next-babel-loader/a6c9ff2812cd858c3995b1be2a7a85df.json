{"ast":null,"code":"var _jsxFileName = \"/Users/lawrence_wakefield/Documents/Development/codeworks/final-project/blogging-platform/next/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Dashboard from '../components/Dashboard/Dashboard';\n\nfunction App({\n  postList,\n  tags,\n  auth\n}) {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState([]);\n  const {\n    0: feed,\n    1: setFeed\n  } = useState('normal');\n  useEffect(() => {\n    setPosts(postList);\n    setFeed('normal');\n  }, []);\n\n  const getPostByTag = async tag => {\n    await axios.get(`http://localhost:3001/posts/${tag}`).then(data => {\n      setPosts(data.data);\n      setFeed('tags');\n    });\n  };\n\n  const searchPosts = async term => {\n    await axios.get(`http://localhost:3001/posts/search/${term}`).then(data => {\n      setPosts(data.data);\n      setFeed('search');\n    });\n  };\n\n  const addToList = async (user, postId) => {\n    await axios.get(`http://localhost:3001/users/${user.nickname}`).then(res => {\n      if (res.data[0]) {\n        axios.put(`http://localhost:3001/users/${user.nickname}`, {\n          reading: postId\n        });\n      } else {\n        createUser(user.nickname, postId);\n      }\n    });\n  };\n\n  const addToPosts = async (user, postId) => {\n    await axios.get(`http://localhost:3001/users/${user.nickname}`).then(res => {\n      if (res.data[0]) {\n        axios.put(`http://localhost:3001/users/${user.nickname}`, {\n          post: postId\n        });\n      } else {//TODO: create user with post\n      }\n    });\n  };\n\n  const createUser = async (name, postId) => {\n    await axios.post(`http://localhost:3001/users`, {\n      name: name,\n      reading: postId\n    });\n  };\n\n  const getReadingList = async user => {\n    console.log('getting reading lsit');\n    await axios.get(`http://localhost:3001/users/${user.nickname}`).then(res => {\n      const list = res.data[0].reading;\n      console.log(list);\n      listHelper(list);\n    });\n  }; //part of get reading list and delete from list\n\n\n  const listHelper = async list => {\n    await axios.get(`http://localhost:3001/list`, {\n      params: {\n        list: list\n      }\n    }).then(res => {\n      setPosts(res.data);\n      setFeed('list');\n    });\n  };\n\n  const deleteFromList = async (user, postid) => {\n    await axios.put(`http://localhost:3001/list/${user.nickname}`, {\n      reading: postid\n    }).then(res => {\n      const list = res.data.reading;\n      listHelper(list);\n    });\n  };\n\n  const checkReadingList = async (user, postId) => {\n    return axios.get(`http://localhost:3001/users/${user.nickname}`).then(res => {\n      const list = res.data[0].reading;\n      return list.includes(postId) ? true : false;\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: \"app_body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, __jsx(Dashboard, {\n    posts: posts,\n    tags: tags,\n    getPostByTag: getPostByTag,\n    addToList: addToList,\n    searchPosts: searchPosts,\n    feedState: feed,\n    getReadingList: getReadingList,\n    deleteFromList: deleteFromList,\n    checkReadingList: checkReadingList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }));\n}\n\nApp.getInitialProps = async ctx => {\n  const res = await axios.get('http://localhost:3001/posts');\n  const tags = await axios.get('http://localhost:3001/tags');\n  return {\n    postList: res.data,\n    tags: tags.data\n  };\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/lawrence_wakefield/Documents/Development/codeworks/final-project/blogging-platform/next/pages/index.js"],"names":["React","useState","useEffect","axios","Dashboard","App","postList","tags","auth","posts","setPosts","feed","setFeed","getPostByTag","tag","get","then","data","searchPosts","term","addToList","user","postId","nickname","res","put","reading","createUser","addToPosts","post","name","getReadingList","console","log","list","listHelper","params","deleteFromList","postid","checkReadingList","includes","getInitialProps","ctx"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport Dashboard from '../components/Dashboard/Dashboard';\n\n\nfunction App({ postList, tags, auth }) {\n\n  const [posts, setPosts] = useState([]);\n  const [feed, setFeed] = useState('normal');\n\n  useEffect(() => {\n    setPosts(postList);\n    setFeed('normal');\n    \n  }, []);\n\n  const getPostByTag = async(tag) => {\n    await axios.get(`http://localhost:3001/posts/${tag}`)\n    .then(\n      (data) => {\n        setPosts(data.data);\n        setFeed('tags');\n      } \n      )\n  }\n\n  const searchPosts = async(term) => {\n    await axios.get(`http://localhost:3001/posts/search/${term}`)\n    .then((data) => {\n      setPosts(data.data)\n      setFeed('search');\n    })\n  }\n\n  const addToList = async(user, postId) => {\n    await axios.get(`http://localhost:3001/users/${user.nickname}`)\n    .then((res) => {\n    \n      if(res.data[0]){\n        axios.put(`http://localhost:3001/users/${user.nickname}`, {reading: postId});\n      }\n      else{\n       createUser(user.nickname, postId)\n      }\n    })\n  }\n\n  const addToPosts = async(user, postId) => {\n    await axios.get(`http://localhost:3001/users/${user.nickname}`)\n    .then((res) => {\n    \n      if(res.data[0]){\n        axios.put(`http://localhost:3001/users/${user.nickname}`, {post: postId});\n      }\n      else{\n       //TODO: create user with post\n      }\n    })\n  }\n\n\n  const createUser = async(name, postId) => {\n    await axios.post(`http://localhost:3001/users`, {name: name, reading: postId})\n  }\n\n  const getReadingList = async(user) => {\n    console.log('getting reading lsit')\n    await axios.get(`http://localhost:3001/users/${user.nickname}`)\n    .then((res) => {\n      \n      const list = res.data[0].reading;\n      console.log(list);\n      listHelper(list);\n    })\n  }\n //part of get reading list and delete from list\n  const listHelper = async(list) => {\n    await axios.get(`http://localhost:3001/list`, { params: {list: list}})\n    .then((res) => {\n      setPosts(res.data);\n      setFeed('list');\n    });\n  }\n\n  const deleteFromList = async(user, postid) => {\n   await axios.put(`http://localhost:3001/list/${user.nickname}`, {reading: postid})\n   .then(res =>  {\n     const list = res.data.reading;\n    listHelper(list); \n   });\n  }\n\n  const checkReadingList = async(user, postId) => {\n    return axios.get(`http://localhost:3001/users/${user.nickname}`)\n    .then((res) => {\n      const list = res.data[0].reading;\n      return list.includes(postId) ? true : false;\n    })\n  }\n\n  return (\n    <div className=\"app_body\">\n     \n      <Dashboard posts={posts} \n                  tags={tags} \n                  getPostByTag={getPostByTag} \n                  addToList={addToList}\n                  searchPosts={searchPosts}\n                  feedState={feed}\n                  getReadingList={getReadingList}\n                  deleteFromList={deleteFromList}\n                  checkReadingList={checkReadingList}\n                  />\n    </div>\n  );\n}\n\nApp.getInitialProps = async ctx => {\n  const res = await axios.get('http://localhost:3001/posts');\n  const tags = await axios.get('http://localhost:3001/tags');\n  return { postList: res.data, tags: tags.data };\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}