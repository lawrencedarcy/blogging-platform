{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport jwtDecode from 'jwt-decode';\nimport Cookie from 'js-cookie';\nexport var AuthToken = /*#__PURE__*/function () {\n  function AuthToken(token) {\n    _classCallCheck(this, AuthToken);\n\n    this.token = token;\n\n    _defineProperty(this, \"decodedToken\", void 0);\n\n    // we are going to default to an expired decodedToken\n    this.decodedToken = {\n      email: \"\",\n      exp: 0\n    }; // then try and decode the jwt using jwt-decode\n\n    try {\n      if (token) this.decodedToken = jwtDecode(token);\n    } catch (e) {}\n  }\n\n  _createClass(AuthToken, [{\n    key: \"authorizationString\",\n    get: function get() {\n      return \"Bearer \".concat(this.token);\n    }\n  }, {\n    key: \"expiresAt\",\n    get: function get() {\n      return new Date(this.decodedToken.exp * 1000);\n    }\n  }, {\n    key: \"isExpired\",\n    get: function get() {\n      return new Date() > this.expiresAt;\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return !this.isExpired;\n    }\n  }], [{\n    key: \"storeToken\",\n    value: function storeToken(token) {\n      return _regeneratorRuntime.async(function storeToken$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              Cookie.set(TOKEN_STORAGE_KEY, token);\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Router.push(\"/dashboard\"));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return AuthToken;\n}();","map":{"version":3,"sources":["/Users/lawrence_wakefield/Documents/Development/codeworks/final-project/blogging-platform/next/services/auth_token.ts"],"names":["jwtDecode","Cookie","AuthToken","token","decodedToken","email","exp","e","Date","expiresAt","isExpired","set","TOKEN_STORAGE_KEY","Router","push"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAOA,WAAaC,SAAb;AAGE,qBAAqBC,KAArB,EAAqC;AAAA;;AAAA,SAAhBA,KAAgB,GAAhBA,KAAgB;;AAAA;;AACnC;AACA,SAAKC,YAAL,GAAoB;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,GAAG,EAAE;AAAlB,KAApB,CAFmC,CAInC;;AACA,QAAI;AACF,UAAIH,KAAJ,EAAW,KAAKC,YAAL,GAAoBJ,SAAS,CAACG,KAAD,CAA7B;AACZ,KAFD,CAEE,OAAOI,CAAP,EAAU,CACX;AACF;;AAZH;AAAA;AAAA,wBAc4B;AACxB,8BAAiB,KAAKJ,KAAtB;AACD;AAhBH;AAAA;AAAA,wBAkBwB;AACpB,aAAO,IAAIK,IAAJ,CAAS,KAAKJ,YAAL,CAAkBE,GAAlB,GAAwB,IAAjC,CAAP;AACD;AApBH;AAAA;AAAA,wBAsB2B;AACvB,aAAO,IAAIE,IAAJ,KAAa,KAAKC,SAAzB;AACD;AAxBH;AAAA;AAAA,wBA0ByB;AACrB,aAAO,CAAC,KAAKC,SAAb;AACD;AA5BH;AAAA;AAAA,+BA8B0BP,KA9B1B;AAAA;AAAA;AAAA;AAAA;AA+BIF,cAAAA,MAAM,CAACU,GAAP,CAAWC,iBAAX,EAA8BT,KAA9B;AA/BJ;AAAA,+CAgCUU,MAAM,CAACC,IAAP,CAAY,YAAZ,CAhCV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["import jwtDecode from 'jwt-decode';\nimport Cookie from 'js-cookie';\n\nexport type DecodedToken = {\n  readonly email: string;\n  readonly exp: number;\n}\n\nexport class AuthToken {\n  readonly decodedToken: DecodedToken;\n\n  constructor(readonly token?: string) {\n    // we are going to default to an expired decodedToken\n    this.decodedToken = { email: \"\", exp: 0 };\n\n    // then try and decode the jwt using jwt-decode\n    try {\n      if (token) this.decodedToken = jwtDecode(token);\n    } catch (e) {\n    }\n  }\n\n  get authorizationString() {\n    return `Bearer ${this.token}`;\n  }\n\n  get expiresAt(): Date {\n    return new Date(this.decodedToken.exp * 1000);\n  }\n\n  get isExpired(): boolean {\n    return new Date() > this.expiresAt;\n  }\n\n  get isValid(): boolean {\n    return !this.isExpired;\n  }\n\n  static async storeToken(token: string) {\n    Cookie.set(TOKEN_STORAGE_KEY, token);\n    await Router.push(\"/dashboard\");\n  }\n}"]},"metadata":{},"sourceType":"module"}